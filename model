{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2fbfc3e3",
   "metadata": {
    "papermill": {
     "duration": 0.007845,
     "end_time": "2024-09-13T20:35:16.691164",
     "exception": false,
     "start_time": "2024-09-13T20:35:16.683319",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Movie Recommender system (2023)\n",
    "Predict the ratings of users based on MovieTweetings dataset\n",
    "\n",
    "### Assignment\n",
    "Implement a collaborative filtering algorithm for predicting movie ratings.\n",
    "\n",
    "#### Evaluation\n",
    "## Goal \n",
    "Predict the movie ratings of Twitter users. Predict the corresponding rating between 0 and 10\n",
    "## Metric \n",
    "The evaluation metric for the competition (Movie recommender system (2023)) to use is the Root-Mean-Square-Error (RMSE)\n",
    "\n",
    "#### Competition\n",
    "* Competition name: Movie recommender system (2023)\n",
    "* Competition host: Nacho\n",
    "* Competitor name: Andreeo Gonzalez"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e42a1896",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-13T20:35:16.708770Z",
     "iopub.status.busy": "2024-09-13T20:35:16.707578Z",
     "iopub.status.idle": "2024-09-13T20:35:18.978184Z",
     "shell.execute_reply": "2024-09-13T20:35:18.976631Z"
    },
    "papermill": {
     "duration": 2.282355,
     "end_time": "2024-09-13T20:35:18.980922",
     "exception": false,
     "start_time": "2024-09-13T20:35:16.698567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/movie-recommender-dataset/movies.csv\n",
      "/kaggle/input/movie-recommender-dataset/raitings_training.csv\n",
      "/kaggle/input/movie-recommender-dataset/users.csv\n",
      "/kaggle/input/movie-recommender-dataset/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "from collections import Counter\n",
    "from sklearn.model_selection import train_test_split\n",
    "from scipy import sparse\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9fcb9c07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:35:18.998419Z",
     "iopub.status.busy": "2024-09-13T20:35:18.997268Z",
     "iopub.status.idle": "2024-09-13T20:35:19.853513Z",
     "shell.execute_reply": "2024-09-13T20:35:19.852267Z"
    },
    "papermill": {
     "duration": 0.867994,
     "end_time": "2024-09-13T20:35:19.856459",
     "exception": false,
     "start_time": "2024-09-13T20:35:18.988465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load and Build Dataset\n",
    "movies = pd.read_csv('/kaggle/input/movie-recommender-dataset/movies.csv')\n",
    "ratings_training = pd.read_csv('/kaggle/input/movie-recommender-dataset/raitings_training.csv')\n",
    "users  = pd.read_csv('/kaggle/input/movie-recommender-dataset/users.csv')\n",
    "test_data = pd.read_csv('/kaggle/input/movie-recommender-dataset/test.csv',sep='-')\n",
    "\n",
    "#default rating to all records of test_data\n",
    "test_data['rating']= 5\n",
    "#se establece un rating de 5 (ni \"no me gusta\" ni \"me gusta\") por defecto a todos, para luego en la etapa de procesamiento de datos\n",
    "#solo aquellas peliculas de las cuales no existe ningun dato en los datos de entrenamiento se les añada un 5 por defecto\n",
    "#de esta manera mejoro mucho el problema de sesgo que me generaban estos datos  \n",
    "\n",
    "#processed movie data (cleaning duplicates and movies where genre is empty)\n",
    "movies = movies.sort_values('genre', na_position='last').drop_duplicates(['itemid', 'title'], keep='first')\n",
    "#check_duplicates = [movies_data.duplicated(subset=['itemid'], keep=False)]\n",
    "\n",
    "#ratings_training_data =  pd.concat([ratings_training_data,test_data])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5dfdb1b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:35:19.874016Z",
     "iopub.status.busy": "2024-09-13T20:35:19.872967Z",
     "iopub.status.idle": "2024-09-13T20:35:19.882788Z",
     "shell.execute_reply": "2024-09-13T20:35:19.881605Z"
    },
    "papermill": {
     "duration": 0.021012,
     "end_time": "2024-09-13T20:35:19.885113",
     "exception": false,
     "start_time": "2024-09-13T20:35:19.864101",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def preprocess_and_concat(ratings_training_data, test_data):\n",
    "\n",
    "    new_users = set(test_data['itemid'].unique()) - set(ratings_training_data['userid'].unique())\n",
    "\n",
    "    mean_ratings = ratings_training_data.groupby('itemid')['rating'].mean().reset_index()\n",
    "    \n",
    "\n",
    "    def assign_rating(row):\n",
    "        if row['userid'] in new_users:\n",
    "\n",
    "            if row['itemid'] in mean_ratings['itemid'].unique():\n",
    "                return round(mean_ratings[mean_ratings['itemid'] == row['itemid']]['rating'].values[0],0)\n",
    "            else:\n",
    "                # set default value to movies that not exist in ratings_training_data\n",
    "                return 5\n",
    "        else:\n",
    "            return row['rating']\n",
    "    \n",
    "    test_data['rating'] = test_data.apply(assign_rating, axis=1)\n",
    "    \n",
    "    concatenated_data = pd.concat([ratings_training_data, test_data])\n",
    "    \n",
    "    return concatenated_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f429f24b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:35:19.902806Z",
     "iopub.status.busy": "2024-09-13T20:35:19.901684Z",
     "iopub.status.idle": "2024-09-13T20:35:22.096584Z",
     "shell.execute_reply": "2024-09-13T20:35:22.095442Z"
    },
    "papermill": {
     "duration": 2.206979,
     "end_time": "2024-09-13T20:35:22.099610",
     "exception": false,
     "start_time": "2024-09-13T20:35:19.892631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = preprocess_and_concat(ratings_training, test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e5fd0154",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:35:22.116225Z",
     "iopub.status.busy": "2024-09-13T20:35:22.115782Z",
     "iopub.status.idle": "2024-09-13T20:35:22.127137Z",
     "shell.execute_reply": "2024-09-13T20:35:22.125952Z"
    },
    "papermill": {
     "duration": 0.022375,
     "end_time": "2024-09-13T20:35:22.129517",
     "exception": false,
     "start_time": "2024-09-13T20:35:22.107142",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   userid   itemid  rating\n",
      "0   20432  2265171     9.0\n",
      "1   59416  2119532     8.0\n",
      "2   23025   434409     7.0\n",
      "3   37262  3064298     7.0\n",
      "4   65696   462229     9.0\n"
     ]
    }
   ],
   "source": [
    "#print rows head\n",
    "print(train.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0a0b6869",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:35:22.147060Z",
     "iopub.status.busy": "2024-09-13T20:35:22.146035Z",
     "iopub.status.idle": "2024-09-13T20:35:22.391656Z",
     "shell.execute_reply": "2024-09-13T20:35:22.390336Z"
    },
    "papermill": {
     "duration": 0.257149,
     "end_time": "2024-09-13T20:35:22.394297",
     "exception": false,
     "start_time": "2024-09-13T20:35:22.137148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Counter({8.0: 198829,\n",
       "         7.0: 184317,\n",
       "         5.0: 153787,\n",
       "         9.0: 116569,\n",
       "         6.0: 107583,\n",
       "         10.0: 96991,\n",
       "         4.0: 25283,\n",
       "         3.0: 13874,\n",
       "         1.0: 9672,\n",
       "         2.0: 8223,\n",
       "         0.0: 242})"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#distribution ratings and nº ratings per user\n",
    "Counter(train.rating)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2d378c9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:35:22.412596Z",
     "iopub.status.busy": "2024-09-13T20:35:22.411562Z",
     "iopub.status.idle": "2024-09-13T20:35:22.420083Z",
     "shell.execute_reply": "2024-09-13T20:35:22.419023Z"
    },
    "papermill": {
     "duration": 0.020206,
     "end_time": "2024-09-13T20:35:22.422431",
     "exception": false,
     "start_time": "2024-09-13T20:35:22.402225",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#establecer un indice ordenado a todos los usuarios para almacenar correctamente\n",
    "#y buscar correctamente cada user/movie en su lugar correspondiente\n",
    "def set_ids_by_order(column):\n",
    "    #get unique ids of column (deleting possibles duplicates)\n",
    "    ids = column.unique()\n",
    "    #set to each userid a index\n",
    "    order_ids_by_index = { userid:index for index,userid in enumerate(ids)}\n",
    "    #set array to save all values of userid\n",
    "    values_ids = np.array([order_ids_by_index[userid] for userid in column])\n",
    "    return order_ids_by_index, values_ids, len(ids)\n",
    "\n",
    "def convert_dataset(dataset):\n",
    "    #get ids, column values and number of items\n",
    "    user_ids, dataset['userid'], n_users = set_ids_by_order(dataset['userid'])\n",
    "    item_ids, dataset['itemid'], n_items = set_ids_by_order(dataset['itemid']) \n",
    "    #dic = { \n",
    "    #    'dataset':dataset, \n",
    "    #    'user_ids': user_ids,\n",
    "    #    'item_ids': item_ids, \n",
    "    #    'n_users': n_users, \n",
    "    #    'n_items':  n_items,\n",
    "    #}\n",
    "    return dataset, user_ids, n_users, item_ids, n_items"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "52f102f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:35:22.440368Z",
     "iopub.status.busy": "2024-09-13T20:35:22.439491Z",
     "iopub.status.idle": "2024-09-13T20:35:23.454052Z",
     "shell.execute_reply": "2024-09-13T20:35:23.452922Z"
    },
    "papermill": {
     "duration": 1.026076,
     "end_time": "2024-09-13T20:35:23.456398",
     "exception": false,
     "start_time": "2024-09-13T20:35:22.430322",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71259 users and 37704 items (movies)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userid</th>\n",
       "      <th>itemid</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   userid  itemid  rating\n",
       "0       0       0     9.0\n",
       "1       1       1     8.0\n",
       "2       2       2     7.0\n",
       "3       3       3     7.0\n",
       "4       4       4     9.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#obtemos el dataset explotado\n",
    "dataset, user_ids, n_users, item_ids, n_items = convert_dataset(train)\n",
    "\n",
    "print(\"{} users and {} items (movies)\".format(n_users, n_items))\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7285deda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:35:23.474849Z",
     "iopub.status.busy": "2024-09-13T20:35:23.474428Z",
     "iopub.status.idle": "2024-09-13T20:35:23.481522Z",
     "shell.execute_reply": "2024-09-13T20:35:23.480468Z"
    },
    "papermill": {
     "duration": 0.019222,
     "end_time": "2024-09-13T20:35:23.484424",
     "exception": false,
     "start_time": "2024-09-13T20:35:23.465202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# creamos vectores factor/embeddings que son de espacios dimensionales inferiores\n",
    "def create_vector(n_features,n_factors):\n",
    "    # n_features contains the number of users/items(movies)\n",
    "    # n_factors contains the number of factors to apply to the vector (n*f)\n",
    "    \n",
    "    # generate (initializate) the values of factor vectors \n",
    "    return 11 * np.random.random((n_features,n_factors)) / n_factors\n",
    "    \n",
    "# creamos matrix escasa (sparse matrix) [[0,0...2.,0][0,3,0...1,3,0],...]\n",
    "def generate_matrix(d, rows, cols, by_column=\"rating\"):\n",
    "    #create sparse matrix\n",
    "    #ratings = d['dataset'][by_column].values\n",
    "    #user_ids, item_ids = d['user_ids'].values, d['item_ids'].values\n",
    "    return sparse.csc_matrix((d[by_column].values,(d['userid'].values, d['itemid'].values)), shape=(rows,cols))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d8112a56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:35:23.502786Z",
     "iopub.status.busy": "2024-09-13T20:35:23.501803Z",
     "iopub.status.idle": "2024-09-13T20:35:25.293626Z",
     "shell.execute_reply": "2024-09-13T20:35:25.292540Z"
    },
    "papermill": {
     "duration": 1.803757,
     "end_time": "2024-09-13T20:35:25.296342",
     "exception": false,
     "start_time": "2024-09-13T20:35:23.492585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[9., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 8., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 7., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = generate_matrix(dataset, n_users, n_items)\n",
    "Y.todense()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "07943ec4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:35:25.314463Z",
     "iopub.status.busy": "2024-09-13T20:35:25.314080Z",
     "iopub.status.idle": "2024-09-13T20:35:25.322713Z",
     "shell.execute_reply": "2024-09-13T20:35:25.321647Z"
    },
    "papermill": {
     "duration": 0.020524,
     "end_time": "2024-09-13T20:35:25.325119",
     "exception": false,
     "start_time": "2024-09-13T20:35:25.304595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#creamos una función para que ejecute las predicciones = r_xi = p_x * q_i\n",
    "def estimate(dataset, P, Q):\n",
    "    #P(users), P(items)\n",
    "    #multiply both factor vectos and then sum each multiplication\n",
    "    dataset['estimation'] = np.sum(np.multiply(Q[dataset['itemid']], P[dataset['userid']]),axis=1)\n",
    "    return dataset\n",
    "\n",
    "#creamos la funcion de coste\n",
    "def rmse(dataset, P, Q):\n",
    "    #P(users), P(items)\n",
    "    user = item = 0\n",
    "    Y = generate_matrix(dataset, P.shape[user], Q.shape[item])\n",
    "    R = estimate(dataset, P, Q)\n",
    "    Y_pred = generate_matrix(R, P.shape[user], Q.shape[item], 'estimation')\n",
    "    mse = np.sum((Y-Y_pred).power(2))/dataset.shape[0]\n",
    "    return np.sqrt(mse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "278bcd3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:35:25.343483Z",
     "iopub.status.busy": "2024-09-13T20:35:25.343078Z",
     "iopub.status.idle": "2024-09-13T20:35:25.356066Z",
     "shell.execute_reply": "2024-09-13T20:35:25.354684Z"
    },
    "papermill": {
     "duration": 0.025132,
     "end_time": "2024-09-13T20:35:25.358548",
     "exception": false,
     "start_time": "2024-09-13T20:35:25.333416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# crear la funciones para el descendiente de gradiente\n",
    "def gradient(dataset, P, Q):\n",
    "    #P(users), P(items)\n",
    "    user = item = 0\n",
    "    Y = generate_matrix(dataset, P.shape[user], Q.shape[item])\n",
    "    R = estimate(dataset, P, Q)\n",
    "    Y_pred = generate_matrix(R, P.shape[user], Q.shape[item], 'estimation')\n",
    "    \n",
    "    #compute gradient for V (user) with regularization\n",
    "    U = (-2/dataset.shape[0])*((Y-Y_pred)*Q)+(2*lmbda*P)\n",
    "    #compute gradient for V (item/films) with regularization\n",
    "    V = (-2/dataset.shape[0])*((Y-Y_pred).T*P)+(2*lmbda*Q)\n",
    "    return U,V\n",
    "\n",
    "#crear la funcion para ejecutar el gradiente descendiente\n",
    "def GD(dataset, P, Q, epochs=500, learning_rate=0.01):\n",
    "    Y = generate_matrix(dataset, P.shape[0], Q.shape[0])\n",
    "    # momentum value\n",
    "    beta = 0.99\n",
    "    #gradients\n",
    "    U,V = gradient(dataset,P,Q)\n",
    "    grad_value_user=U\n",
    "    grad_value_item=V\n",
    "    #implement momentum to reduce overfitting\n",
    "    #https://ml-cheatsheet.readthedocs.io/en/latest/optimizers.html#momentum\n",
    "    for i in range(epochs):\n",
    "        U,V = gradient(dataset,P,Q)\n",
    "        \n",
    "        grad_value_user = beta*grad_value_user + (1-beta)*U\n",
    "        grad_value_item =beta*grad_value_item +(1-beta)*V\n",
    "    \n",
    "        P = P - learning_rate*grad_value_user\n",
    "        Q = Q - learning_rate*grad_value_item\n",
    "        \n",
    "        if(not (i+1)%10):\n",
    "            print(\"Epoch\",i+1,\":\")\n",
    "            print(\" Train - rmse:\",rmse(dataset,P,Q))\n",
    "    return P,Q"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "31ab4ca1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:35:25.376630Z",
     "iopub.status.busy": "2024-09-13T20:35:25.376238Z",
     "iopub.status.idle": "2024-09-13T20:56:20.020795Z",
     "shell.execute_reply": "2024-09-13T20:56:20.019525Z"
    },
    "papermill": {
     "duration": 1254.665749,
     "end_time": "2024-09-13T20:56:20.032500",
     "exception": false,
     "start_time": "2024-09-13T20:35:25.366751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 10 :\n",
      " Train - rmse: 3.219484351935837\n",
      "Epoch 20 :\n",
      " Train - rmse: 3.119015699194443\n",
      "Epoch 30 :\n",
      " Train - rmse: 3.0316161982055707\n",
      "Epoch 40 :\n",
      " Train - rmse: 2.957680812086728\n",
      "Epoch 50 :\n",
      " Train - rmse: 2.896753039901831\n",
      "Epoch 60 :\n",
      " Train - rmse: 2.8476623389931803\n",
      "Epoch 70 :\n",
      " Train - rmse: 2.8087228613505535\n",
      "Epoch 80 :\n",
      " Train - rmse: 2.7779606006300974\n",
      "Epoch 90 :\n",
      " Train - rmse: 2.7533337336222536\n",
      "Epoch 100 :\n",
      " Train - rmse: 2.7329179241593575\n",
      "Epoch 110 :\n",
      " Train - rmse: 2.7150404315213437\n",
      "Epoch 120 :\n",
      " Train - rmse: 2.6983590618690747\n",
      "Epoch 130 :\n",
      " Train - rmse: 2.681891051264507\n",
      "Epoch 140 :\n",
      " Train - rmse: 2.6650019421525926\n",
      "Epoch 150 :\n",
      " Train - rmse: 2.647366094541397\n",
      "Epoch 160 :\n",
      " Train - rmse: 2.6289099085073366\n",
      "Epoch 170 :\n",
      " Train - rmse: 2.6097472364256307\n",
      "Epoch 180 :\n",
      " Train - rmse: 2.5901145447684653\n",
      "Epoch 190 :\n",
      " Train - rmse: 2.570311492133607\n",
      "Epoch 200 :\n",
      " Train - rmse: 2.5506508350485575\n",
      "Epoch 210 :\n",
      " Train - rmse: 2.5314199676508036\n",
      "Epoch 220 :\n",
      " Train - rmse: 2.5128549448753765\n",
      "Epoch 230 :\n",
      " Train - rmse: 2.4951265590492584\n",
      "Epoch 240 :\n",
      " Train - rmse: 2.4783369952195704\n",
      "Epoch 250 :\n",
      " Train - rmse: 2.462524848478979\n",
      "Epoch 260 :\n",
      " Train - rmse: 2.447675893888811\n",
      "Epoch 270 :\n",
      " Train - rmse: 2.4337369602277796\n",
      "Epoch 280 :\n",
      " Train - rmse: 2.4206305267386132\n",
      "Epoch 290 :\n",
      " Train - rmse: 2.408268151239165\n",
      "Epoch 300 :\n",
      " Train - rmse: 2.3965614428263895\n",
      "Epoch 310 :\n",
      " Train - rmse: 2.3854299104947048\n",
      "Epoch 320 :\n",
      " Train - rmse: 2.3748055684295584\n",
      "Epoch 330 :\n",
      " Train - rmse: 2.36463460686902\n",
      "Epoch 340 :\n",
      " Train - rmse: 2.354876721232661\n",
      "Epoch 350 :\n",
      " Train - rmse: 2.345502833208057\n",
      "Epoch 360 :\n",
      " Train - rmse: 2.3364919542873\n",
      "Epoch 370 :\n",
      " Train - rmse: 2.327827863279036\n",
      "Epoch 380 :\n",
      " Train - rmse: 2.3194961267870964\n",
      "Epoch 390 :\n",
      " Train - rmse: 2.311481817098452\n",
      "Epoch 400 :\n",
      " Train - rmse: 2.303768103219744\n",
      "Epoch 410 :\n",
      " Train - rmse: 2.2963357301372542\n",
      "Epoch 420 :\n",
      " Train - rmse: 2.289163274186163\n",
      "Epoch 430 :\n",
      " Train - rmse: 2.2822279770731884\n",
      "Epoch 440 :\n",
      " Train - rmse: 2.275506919341317\n",
      "Epoch 450 :\n",
      " Train - rmse: 2.268978292076771\n",
      "Epoch 460 :\n",
      " Train - rmse: 2.2626225555917445\n",
      "Epoch 470 :\n",
      " Train - rmse: 2.2564233255443513\n",
      "Epoch 480 :\n",
      " Train - rmse: 2.2503678897570683\n",
      "Epoch 490 :\n",
      " Train - rmse: 2.2444473229641355\n",
      "Epoch 500 :\n",
      " Train - rmse: 2.238656223785883\n",
      "Epoch 510 :\n",
      " Train - rmse: 2.232992142723809\n",
      "Epoch 520 :\n",
      " Train - rmse: 2.2274547987889317\n",
      "Epoch 530 :\n",
      " Train - rmse: 2.2220451948164284\n",
      "Epoch 540 :\n",
      " Train - rmse: 2.2167647388965155\n",
      "Epoch 550 :\n",
      " Train - rmse: 2.2116144644727003\n",
      "Epoch 560 :\n",
      " Train - rmse: 2.2065944182459596\n",
      "Epoch 570 :\n",
      " Train - rmse: 2.201703257143533\n",
      "Epoch 580 :\n",
      " Train - rmse: 2.1969380671659144\n",
      "Epoch 590 :\n",
      " Train - rmse: 2.192294391243762\n",
      "Epoch 600 :\n",
      " Train - rmse: 2.18776643279127\n",
      "Epoch 610 :\n",
      " Train - rmse: 2.1833473879109473\n",
      "Epoch 620 :\n",
      " Train - rmse: 2.1790298526610163\n",
      "Epoch 630 :\n",
      " Train - rmse: 2.1748062520248714\n",
      "Epoch 640 :\n",
      " Train - rmse: 2.1706692431126338\n",
      "Epoch 650 :\n",
      " Train - rmse: 2.166612055120497\n",
      "Epoch 660 :\n",
      " Train - rmse: 2.162628740923339\n",
      "Epoch 670 :\n",
      " Train - rmse: 2.158714328167424\n",
      "Epoch 680 :\n",
      " Train - rmse: 2.154864869872864\n",
      "Epoch 690 :\n",
      " Train - rmse: 2.151077404707852\n",
      "Epoch 700 :\n",
      " Train - rmse: 2.1473498445267682\n",
      "Epoch 710 :\n",
      " Train - rmse: 2.1436808111566097\n",
      "Epoch 720 :\n",
      " Train - rmse: 2.1400694458311365\n",
      "Epoch 730 :\n",
      " Train - rmse: 2.136515213472115\n",
      "Epoch 740 :\n",
      " Train - rmse: 2.1330177207754417\n",
      "Epoch 750 :\n",
      " Train - rmse: 2.1295765624629075\n",
      "Epoch 760 :\n",
      " Train - rmse: 2.1261912048156\n",
      "Epoch 770 :\n",
      " Train - rmse: 2.1228609103633485\n",
      "Epoch 780 :\n",
      " Train - rmse: 2.1195847029024715\n",
      "Epoch 790 :\n",
      " Train - rmse: 2.116361368236693\n",
      "Epoch 800 :\n",
      " Train - rmse: 2.1131894834042386\n",
      "Epoch 810 :\n",
      " Train - rmse: 2.1100674657300025\n",
      "Epoch 820 :\n",
      " Train - rmse: 2.106993632750704\n",
      "Epoch 830 :\n",
      " Train - rmse: 2.103966264724342\n",
      "Epoch 840 :\n",
      " Train - rmse: 2.1009836628076988\n",
      "Epoch 850 :\n",
      " Train - rmse: 2.098044197793499\n",
      "Epoch 860 :\n",
      " Train - rmse: 2.0951463462740665\n",
      "Epoch 870 :\n",
      " Train - rmse: 2.0922887130058716\n",
      "Epoch 880 :\n",
      " Train - rmse: 2.0894700399056414\n",
      "Epoch 890 :\n",
      " Train - rmse: 2.086689203391331\n",
      "Epoch 900 :\n",
      " Train - rmse: 2.083945202630311\n",
      "Epoch 910 :\n",
      " Train - rmse: 2.0812371416696296\n",
      "Epoch 920 :\n",
      " Train - rmse: 2.078564208442494\n",
      "Epoch 930 :\n",
      " Train - rmse: 2.0759256533474133\n",
      "Epoch 940 :\n",
      " Train - rmse: 2.073320769576466\n",
      "Epoch 950 :\n",
      " Train - rmse: 2.070748876726418\n",
      "Epoch 960 :\n",
      " Train - rmse: 2.0682093085539504\n",
      "Epoch 970 :\n",
      " Train - rmse: 2.0657014051115885\n",
      "Epoch 980 :\n",
      " Train - rmse: 2.063224508981361\n",
      "Epoch 990 :\n",
      " Train - rmse: 2.0607779649430626\n",
      "Epoch 1000 :\n",
      " Train - rmse: 2.058361122185956\n",
      "Epoch 1010 :\n",
      " Train - rmse: 2.055973338090371\n",
      "Epoch 1020 :\n",
      " Train - rmse: 2.053613982648095\n",
      "Epoch 1030 :\n",
      " Train - rmse: 2.0512824427273855\n",
      "Epoch 1040 :\n",
      " Train - rmse: 2.048978125585379\n",
      "Epoch 1050 :\n",
      " Train - rmse: 2.04670046125344\n",
      "Epoch 1060 :\n",
      " Train - rmse: 2.0444489036394913\n",
      "Epoch 1070 :\n",
      " Train - rmse: 2.042222930381986\n",
      "Epoch 1080 :\n",
      " Train - rmse: 2.040022041637126\n",
      "Epoch 1090 :\n",
      " Train - rmse: 2.0378457580765588\n",
      "Epoch 1100 :\n",
      " Train - rmse: 2.035693618416476\n",
      "Epoch 1110 :\n",
      " Train - rmse: 2.0335651767964316\n",
      "Epoch 1120 :\n",
      " Train - rmse: 2.0314600002866583\n",
      "Epoch 1130 :\n",
      " Train - rmse: 2.029377666738191\n",
      "Epoch 1140 :\n",
      " Train - rmse: 2.0273177631128805\n",
      "Epoch 1150 :\n",
      " Train - rmse: 2.0252798843518143\n",
      "Epoch 1160 :\n",
      " Train - rmse: 2.023263632770005\n",
      "Epoch 1170 :\n",
      " Train - rmse: 2.0212686179090222\n",
      "Epoch 1180 :\n",
      " Train - rmse: 2.01929445674124\n",
      "Epoch 1190 :\n",
      " Train - rmse: 2.017340774100433\n",
      "Epoch 1200 :\n",
      " Train - rmse: 2.0154072032121717\n",
      "Epoch 1210 :\n",
      " Train - rmse: 2.0134933862106985\n",
      "Epoch 1220 :\n",
      " Train - rmse: 2.0115989745525167\n",
      "Epoch 1230 :\n",
      " Train - rmse: 2.0097236292662437\n",
      "Epoch 1240 :\n",
      " Train - rmse: 2.0078670210089964\n",
      "Epoch 1250 :\n",
      " Train - rmse: 2.0060288299280042\n",
      "Epoch 1260 :\n",
      " Train - rmse: 2.0042087453495143\n",
      "Epoch 1270 :\n",
      " Train - rmse: 2.0024064653336855\n",
      "Epoch 1280 :\n",
      " Train - rmse: 2.0006216961434364\n",
      "Epoch 1290 :\n",
      " Train - rmse: 1.998854151677446\n",
      "Epoch 1300 :\n",
      " Train - rmse: 1.9971035529136851\n",
      "Epoch 1310 :\n",
      " Train - rmse: 1.9953696274015709\n",
      "Epoch 1320 :\n",
      " Train - rmse: 1.9936521088297174\n",
      "Epoch 1330 :\n",
      " Train - rmse: 1.9919507366841125\n",
      "Epoch 1340 :\n",
      " Train - rmse: 1.9902652559998295\n",
      "Epoch 1350 :\n",
      " Train - rmse: 1.9885954171993356\n",
      "Epoch 1360 :\n",
      " Train - rmse: 1.9869409760028256\n",
      "Epoch 1370 :\n",
      " Train - rmse: 1.985301693391255\n",
      "Epoch 1380 :\n",
      " Train - rmse: 1.9836773356007829\n",
      "Epoch 1390 :\n",
      " Train - rmse: 1.982067674127967\n",
      "Epoch 1400 :\n",
      " Train - rmse: 1.9804724857276832\n",
      "Epoch 1410 :\n",
      " Train - rmse: 1.9788915523898007\n",
      "Epoch 1420 :\n",
      " Train - rmse: 1.9773246612853914\n",
      "Epoch 1430 :\n",
      " Train - rmse: 1.9757716046781495\n",
      "Epoch 1440 :\n",
      " Train - rmse: 1.9742321798011337\n",
      "Epoch 1450 :\n",
      " Train - rmse: 1.972706188702625\n",
      "Epoch 1460 :\n",
      " Train - rmse: 1.9711934380675193\n",
      "Epoch 1470 :\n",
      " Train - rmse: 1.969693739022235\n",
      "Epoch 1480 :\n",
      " Train - rmse: 1.968206906931581\n",
      "Epoch 1490 :\n",
      " Train - rmse: 1.966732761195645\n",
      "Epoch 1500 :\n",
      " Train - rmse: 1.965271125053646\n",
      "Epoch 1510 :\n",
      " Train - rmse: 1.9638218254001483\n",
      "Epoch 1520 :\n",
      " Train - rmse: 1.962384692617284\n",
      "Epoch 1530 :\n",
      " Train - rmse: 1.9609595604248746\n",
      "Epoch 1540 :\n",
      " Train - rmse: 1.9595462657487663\n",
      "Epoch 1550 :\n",
      " Train - rmse: 1.9581446486064213\n",
      "Epoch 1560 :\n",
      " Train - rmse: 1.9567545520078786\n",
      "Epoch 1570 :\n",
      " Train - rmse: 1.9553758218696382\n",
      "Epoch 1580 :\n",
      " Train - rmse: 1.9540083069388448\n",
      "Epoch 1590 :\n",
      " Train - rmse: 1.9526518587251835\n",
      "Epoch 1600 :\n",
      " Train - rmse: 1.9513063314382475\n",
      "Epoch 1610 :\n",
      " Train - rmse: 1.9499715819285177\n",
      "Epoch 1620 :\n",
      " Train - rmse: 1.9486474696306249\n",
      "Epoch 1630 :\n",
      " Train - rmse: 1.9473338565080058\n",
      "Epoch 1640 :\n",
      " Train - rmse: 1.9460306069985274\n",
      "Epoch 1650 :\n",
      " Train - rmse: 1.9447375879609485\n",
      "Epoch 1660 :\n",
      " Train - rmse: 1.943454668622354\n",
      "Epoch 1670 :\n",
      " Train - rmse: 1.9421817205267966\n",
      "Epoch 1680 :\n",
      " Train - rmse: 1.940918617485445\n",
      "Epoch 1690 :\n",
      " Train - rmse: 1.9396652355284676\n",
      "Epoch 1700 :\n",
      " Train - rmse: 1.9384214528588353\n",
      "Epoch 1710 :\n",
      " Train - rmse: 1.9371871498080822\n",
      "Epoch 1720 :\n",
      " Train - rmse: 1.9359622087939716\n",
      "Epoch 1730 :\n",
      " Train - rmse: 1.934746514279902\n",
      "Epoch 1740 :\n",
      " Train - rmse: 1.933539952735814\n",
      "Epoch 1750 :\n",
      " Train - rmse: 1.932342412600315\n",
      "Epoch 1760 :\n",
      " Train - rmse: 1.9311537842437134\n",
      "Epoch 1770 :\n",
      " Train - rmse: 1.929973959931678\n",
      "Epoch 1780 :\n",
      " Train - rmse: 1.9288028337892715\n",
      "Epoch 1790 :\n",
      " Train - rmse: 1.9276403017651524\n",
      "Epoch 1800 :\n",
      " Train - rmse: 1.9264862615958138\n",
      "Epoch 1810 :\n",
      " Train - rmse: 1.9253406127697785\n",
      "Epoch 1820 :\n",
      " Train - rmse: 1.9242032564917264\n",
      "Epoch 1830 :\n",
      " Train - rmse: 1.9230740956466001\n",
      "Epoch 1840 :\n",
      " Train - rmse: 1.92195303476374\n",
      "Epoch 1850 :\n",
      " Train - rmse: 1.9208399799811575\n",
      "Epoch 1860 :\n",
      " Train - rmse: 1.9197348390100442\n",
      "Epoch 1870 :\n",
      " Train - rmse: 1.918637521099646\n",
      "Epoch 1880 :\n",
      " Train - rmse: 1.9175479370025976\n",
      "Epoch 1890 :\n",
      " Train - rmse: 1.9164659989408321\n",
      "Epoch 1900 :\n",
      " Train - rmse: 1.9153916205721417\n",
      "Epoch 1910 :\n",
      " Train - rmse: 1.9143247169574773\n",
      "Epoch 1920 :\n",
      " Train - rmse: 1.9132652045290373\n",
      "Epoch 1930 :\n",
      " Train - rmse: 1.9122130010591893\n",
      "Epoch 1940 :\n",
      " Train - rmse: 1.91116802563027\n",
      "Epoch 1950 :\n",
      " Train - rmse: 1.9101301986052672\n",
      "Epoch 1960 :\n",
      " Train - rmse: 1.9090994415994111\n",
      "Epoch 1970 :\n",
      " Train - rmse: 1.9080756774526704\n",
      "Epoch 1980 :\n",
      " Train - rmse: 1.9070588302031484\n",
      "Epoch 1990 :\n",
      " Train - rmse: 1.906048825061371\n",
      "Epoch 2000 :\n",
      " Train - rmse: 1.9050455883854487\n",
      "Epoch 2010 :\n",
      " Train - rmse: 1.9040490476570822\n",
      "Epoch 2020 :\n",
      " Train - rmse: 1.9030591314583922\n",
      "Epoch 2030 :\n",
      " Train - rmse: 1.9020757694495263\n",
      "Epoch 2040 :\n",
      " Train - rmse: 1.901098892347016\n",
      "Epoch 2050 :\n",
      " Train - rmse: 1.9001284319028313\n",
      "Epoch 2060 :\n",
      " Train - rmse: 1.899164320884093\n",
      "Epoch 2070 :\n",
      " Train - rmse: 1.8982064930533995\n",
      "Epoch 2080 :\n",
      " Train - rmse: 1.8972548831497151\n",
      "Epoch 2090 :\n",
      " Train - rmse: 1.8963094268697878\n",
      "Epoch 2100 :\n",
      " Train - rmse: 1.8953700608500461\n",
      "Epoch 2110 :\n",
      " Train - rmse: 1.8944367226489445\n",
      "Epoch 2120 :\n",
      " Train - rmse: 1.893509350729725\n",
      "Epoch 2130 :\n",
      " Train - rmse: 1.8925878844435646\n",
      "Epoch 2140 :\n",
      " Train - rmse: 1.8916722640130912\n",
      "Epoch 2150 :\n",
      " Train - rmse: 1.8907624305162436\n",
      "Epoch 2160 :\n",
      " Train - rmse: 1.889858325870469\n",
      "Epoch 2170 :\n",
      " Train - rmse: 1.8889598928172473\n",
      "Epoch 2180 :\n",
      " Train - rmse: 1.8880670749069246\n",
      "Epoch 2190 :\n",
      " Train - rmse: 1.8871798164838722\n",
      "Epoch 2200 :\n",
      " Train - rmse: 1.8862980626719457\n",
      "Epoch 2210 :\n",
      " Train - rmse: 1.8854217593602567\n",
      "Epoch 2220 :\n",
      " Train - rmse: 1.884550853189251\n",
      "Epoch 2230 :\n",
      " Train - rmse: 1.8836852915370879\n",
      "Epoch 2240 :\n",
      " Train - rmse: 1.8828250225063259\n",
      "Epoch 2250 :\n",
      " Train - rmse: 1.8819699949109006\n",
      "Epoch 2260 :\n",
      " Train - rmse: 1.8811201582634045\n",
      "Epoch 2270 :\n",
      " Train - rmse: 1.8802754627626534\n",
      "Epoch 2280 :\n",
      " Train - rmse: 1.8794358592815386\n",
      "Epoch 2290 :\n",
      " Train - rmse: 1.8786012993551595\n",
      "Epoch 2300 :\n",
      " Train - rmse: 1.877771735169231\n",
      "Epoch 2310 :\n",
      " Train - rmse: 1.8769471195487535\n",
      "Epoch 2320 :\n",
      " Train - rmse: 1.8761274059469497\n",
      "Epoch 2330 :\n",
      " Train - rmse: 1.8753125484344473\n",
      "Epoch 2340 :\n",
      " Train - rmse: 1.8745025016887111\n",
      "Epoch 2350 :\n",
      " Train - rmse: 1.8736972209837128\n",
      "Epoch 2360 :\n",
      " Train - rmse: 1.872896662179832\n",
      "Epoch 2370 :\n",
      " Train - rmse: 1.872100781713976\n",
      "Epoch 2380 :\n",
      " Train - rmse: 1.871309536589922\n",
      "Epoch 2390 :\n",
      " Train - rmse: 1.8705228843688617\n",
      "Epoch 2400 :\n",
      " Train - rmse: 1.869740783160149\n",
      "Epoch 2410 :\n",
      " Train - rmse: 1.8689631916122413\n",
      "Epoch 2420 :\n",
      " Train - rmse: 1.8681900689038238\n",
      "Epoch 2430 :\n",
      " Train - rmse: 1.8674213747351172\n",
      "Epoch 2440 :\n",
      " Train - rmse: 1.8666570693193516\n",
      "Epoch 2450 :\n",
      " Train - rmse: 1.8658971133744147\n",
      "Epoch 2460 :\n",
      " Train - rmse: 1.8651414681146503\n",
      "Epoch 2470 :\n",
      " Train - rmse: 1.864390095242817\n",
      "Epoch 2480 :\n",
      " Train - rmse: 1.8636429569421953\n",
      "Epoch 2490 :\n",
      " Train - rmse: 1.862900015868838\n",
      "Epoch 2500 :\n",
      " Train - rmse: 1.8621612351439603\n",
      "Epoch 2510 :\n",
      " Train - rmse: 1.8614265783464699\n",
      "Epoch 2520 :\n",
      " Train - rmse: 1.8606960095056262\n",
      "Epoch 2530 :\n",
      " Train - rmse: 1.8599694930938377\n",
      "Epoch 2540 :\n",
      " Train - rmse: 1.8592469940195802\n",
      "Epoch 2550 :\n",
      " Train - rmse: 1.8585284776204474\n",
      "Epoch 2560 :\n",
      " Train - rmse: 1.8578139096563264\n",
      "Epoch 2570 :\n",
      " Train - rmse: 1.857103256302696\n",
      "Epoch 2580 :\n",
      " Train - rmse: 1.8563964841440477\n",
      "Epoch 2590 :\n",
      " Train - rmse: 1.8556935601674311\n",
      "Epoch 2600 :\n",
      " Train - rmse: 1.8549944517561168\n",
      "Epoch 2610 :\n",
      " Train - rmse: 1.8542991266833813\n",
      "Epoch 2620 :\n",
      " Train - rmse: 1.8536075531064093\n",
      "Epoch 2630 :\n",
      " Train - rmse: 1.8529196995603154\n",
      "Epoch 2640 :\n",
      " Train - rmse: 1.8522355349522766\n",
      "Epoch 2650 :\n",
      " Train - rmse: 1.8515550285557867\n",
      "Epoch 2660 :\n",
      " Train - rmse: 1.8508781500050193\n",
      "Epoch 2670 :\n",
      " Train - rmse: 1.8502048692893012\n",
      "Epoch 2680 :\n",
      " Train - rmse: 1.849535156747699\n",
      "Epoch 2690 :\n",
      " Train - rmse: 1.8488689830637093\n",
      "Epoch 2700 :\n",
      " Train - rmse: 1.8482063192600575\n",
      "Epoch 2710 :\n",
      " Train - rmse: 1.8475471366935978\n",
      "Epoch 2720 :\n",
      " Train - rmse: 1.8468914070503122\n",
      "Epoch 2730 :\n",
      " Train - rmse: 1.846239102340413\n",
      "Epoch 2740 :\n",
      " Train - rmse: 1.845590194893536\n",
      "Epoch 2750 :\n",
      " Train - rmse: 1.8449446573540278\n",
      "Epoch 2760 :\n",
      " Train - rmse: 1.8443024626763271\n",
      "Epoch 2770 :\n",
      " Train - rmse: 1.8436635841204305\n",
      "Epoch 2780 :\n",
      " Train - rmse: 1.8430279952474464\n",
      "Epoch 2790 :\n",
      " Train - rmse: 1.8423956699152293\n",
      "Epoch 2800 :\n",
      " Train - rmse: 1.8417665822740972\n",
      "Epoch 2810 :\n",
      " Train - rmse: 1.8411407067626275\n",
      "Epoch 2820 :\n",
      " Train - rmse: 1.840518018103527\n",
      "Epoch 2830 :\n",
      " Train - rmse: 1.8398984912995755\n",
      "Epoch 2840 :\n",
      " Train - rmse: 1.8392821016296441\n",
      "Epoch 2850 :\n",
      " Train - rmse: 1.8386688246447795\n",
      "Epoch 2860 :\n",
      " Train - rmse: 1.838058636164359\n",
      "Epoch 2870 :\n",
      " Train - rmse: 1.8374515122723067\n",
      "Epoch 2880 :\n",
      " Train - rmse: 1.8368474293133814\n",
      "Epoch 2890 :\n",
      " Train - rmse: 1.8362463638895188\n",
      "Epoch 2900 :\n",
      " Train - rmse: 1.83564829285624\n",
      "Epoch 2910 :\n",
      " Train - rmse: 1.8350531933191196\n",
      "Epoch 2920 :\n",
      " Train - rmse: 1.8344610426303076\n",
      "Epoch 2930 :\n",
      " Train - rmse: 1.8338718183851157\n",
      "Epoch 2940 :\n",
      " Train - rmse: 1.833285498418651\n",
      "Epoch 2950 :\n",
      " Train - rmse: 1.832702060802514\n",
      "Epoch 2960 :\n",
      " Train - rmse: 1.8321214838415423\n",
      "Epoch 2970 :\n",
      " Train - rmse: 1.8315437460706132\n",
      "Epoch 2980 :\n",
      " Train - rmse: 1.8309688262514954\n",
      "Epoch 2990 :\n",
      " Train - rmse: 1.830396703369752\n",
      "Epoch 3000 :\n",
      " Train - rmse: 1.8298273566316976\n",
      "Epoch 3010 :\n",
      " Train - rmse: 1.8292607654613997\n",
      "Epoch 3020 :\n",
      " Train - rmse: 1.828696909497734\n",
      "Epoch 3030 :\n",
      " Train - rmse: 1.8281357685914836\n",
      "Epoch 3040 :\n",
      " Train - rmse: 1.8275773228024903\n",
      "Epoch 3050 :\n",
      " Train - rmse: 1.8270215523968478\n",
      "Epoch 3060 :\n",
      " Train - rmse: 1.8264684378441451\n",
      "Epoch 3070 :\n",
      " Train - rmse: 1.825917959814753\n",
      "Epoch 3080 :\n",
      " Train - rmse: 1.825370099177154\n",
      "Epoch 3090 :\n",
      " Train - rmse: 1.8248248369953186\n",
      "Epoch 3100 :\n",
      " Train - rmse: 1.8242821545261239\n",
      "Epoch 3110 :\n",
      " Train - rmse: 1.8237420332168128\n",
      "Epoch 3120 :\n",
      " Train - rmse: 1.8232044547024964\n",
      "Epoch 3130 :\n",
      " Train - rmse: 1.822669400803696\n",
      "Epoch 3140 :\n",
      " Train - rmse: 1.822136853523928\n",
      "Epoch 3150 :\n",
      " Train - rmse: 1.821606795047322\n",
      "Epoch 3160 :\n",
      " Train - rmse: 1.8210792077362847\n",
      "Epoch 3170 :\n",
      " Train - rmse: 1.820554074129196\n",
      "Epoch 3180 :\n",
      " Train - rmse: 1.8200313769381449\n",
      "Epoch 3190 :\n",
      " Train - rmse: 1.8195110990467003\n",
      "Epoch 3200 :\n",
      " Train - rmse: 1.8189932235077189\n",
      "Epoch 3210 :\n",
      " Train - rmse: 1.8184777335411855\n",
      "Epoch 3220 :\n",
      " Train - rmse: 1.81796461253209\n",
      "Epoch 3230 :\n",
      " Train - rmse: 1.8174538440283363\n",
      "Epoch 3240 :\n",
      " Train - rmse: 1.8169454117386838\n",
      "Epoch 3250 :\n",
      " Train - rmse: 1.816439299530722\n",
      "Epoch 3260 :\n",
      " Train - rmse: 1.8159354914288748\n",
      "Epoch 3270 :\n",
      " Train - rmse: 1.8154339716124386\n",
      "Epoch 3280 :\n",
      " Train - rmse: 1.8149347244136476\n",
      "Epoch 3290 :\n",
      " Train - rmse: 1.8144377343157685\n",
      "Epoch 3300 :\n",
      " Train - rmse: 1.8139429859512286\n",
      "Epoch 3310 :\n",
      " Train - rmse: 1.813450464099765\n",
      "Epoch 3320 :\n",
      " Train - rmse: 1.81296015368661\n",
      "Epoch 3330 :\n",
      " Train - rmse: 1.8124720397806973\n",
      "Epoch 3340 :\n",
      " Train - rmse: 1.8119861075928971\n",
      "Epoch 3350 :\n",
      " Train - rmse: 1.8115023424742807\n",
      "Epoch 3360 :\n",
      " Train - rmse: 1.8110207299144039\n",
      "Epoch 3370 :\n",
      " Train - rmse: 1.8105412555396252\n",
      "Epoch 3380 :\n",
      " Train - rmse: 1.8100639051114389\n",
      "Epoch 3390 :\n",
      " Train - rmse: 1.809588664524842\n",
      "Epoch 3400 :\n",
      " Train - rmse: 1.8091155198067175\n",
      "Epoch 3410 :\n",
      " Train - rmse: 1.808644457114248\n",
      "Epoch 3420 :\n",
      " Train - rmse: 1.808175462733346\n",
      "Epoch 3430 :\n",
      " Train - rmse: 1.8077085230771137\n",
      "Epoch 3440 :\n",
      " Train - rmse: 1.8072436246843195\n",
      "Epoch 3450 :\n",
      " Train - rmse: 1.8067807542179013\n",
      "Epoch 3460 :\n",
      " Train - rmse: 1.806319898463489\n",
      "Epoch 3470 :\n",
      " Train - rmse: 1.8058610443279475\n",
      "Epoch 3480 :\n",
      " Train - rmse: 1.8054041788379445\n",
      "Epoch 3490 :\n",
      " Train - rmse: 1.804949289138535\n",
      "Epoch 3500 :\n",
      " Train - rmse: 1.8044963624917687\n",
      "Epoch 3510 :\n",
      " Train - rmse: 1.8040453862753176\n",
      "Epoch 3520 :\n",
      " Train - rmse: 1.80359634798112\n",
      "Epoch 3530 :\n",
      " Train - rmse: 1.803149235214048\n",
      "Epoch 3540 :\n",
      " Train - rmse: 1.8027040356905926\n",
      "Epoch 3550 :\n",
      " Train - rmse: 1.8022607372375667\n",
      "Epoch 3560 :\n",
      " Train - rmse: 1.8018193277908272\n",
      "Epoch 3570 :\n",
      " Train - rmse: 1.801379795394015\n",
      "Epoch 3580 :\n",
      " Train - rmse: 1.8009421281973135\n",
      "Epoch 3590 :\n",
      " Train - rmse: 1.8005063144562246\n",
      "Epoch 3600 :\n",
      " Train - rmse: 1.80007234253036\n",
      "Epoch 3610 :\n",
      " Train - rmse: 1.799640200882253\n",
      "Epoch 3620 :\n",
      " Train - rmse: 1.7992098780761845\n",
      "Epoch 3630 :\n",
      " Train - rmse: 1.7987813627770244\n",
      "Epoch 3640 :\n",
      " Train - rmse: 1.798354643749092\n",
      "Epoch 3650 :\n",
      " Train - rmse: 1.7979297098550322\n",
      "Epoch 3660 :\n",
      " Train - rmse: 1.7975065500547025\n",
      "Epoch 3670 :\n",
      " Train - rmse: 1.7970851534040824\n",
      "Epoch 3680 :\n",
      " Train - rmse: 1.7966655090541923\n",
      "Epoch 3690 :\n",
      " Train - rmse: 1.796247606250029\n",
      "Epoch 3700 :\n",
      " Train - rmse: 1.7958314343295185\n",
      "Epoch 3710 :\n",
      " Train - rmse: 1.7954169827224777\n",
      "Epoch 3720 :\n",
      " Train - rmse: 1.7950042409495943\n",
      "Epoch 3730 :\n",
      " Train - rmse: 1.7945931986214199\n",
      "Epoch 3740 :\n",
      " Train - rmse: 1.7941838454373769\n",
      "Epoch 3750 :\n",
      " Train - rmse: 1.7937761711847753\n",
      "Epoch 3760 :\n",
      " Train - rmse: 1.7933701657378498\n",
      "Epoch 3770 :\n",
      " Train - rmse: 1.7929658190568014\n",
      "Epoch 3780 :\n",
      " Train - rmse: 1.79256312118686\n",
      "Epoch 3790 :\n",
      " Train - rmse: 1.792162062257353\n",
      "Epoch 3800 :\n",
      " Train - rmse: 1.7917626324807898\n",
      "Epoch 3810 :\n",
      " Train - rmse: 1.7913648221519578\n",
      "Epoch 3820 :\n",
      " Train - rmse: 1.7909686216470304\n",
      "Epoch 3830 :\n",
      " Train - rmse: 1.7905740214226862\n",
      "Epoch 3840 :\n",
      " Train - rmse: 1.7901810120152397\n",
      "Epoch 3850 :\n",
      " Train - rmse: 1.7897895840397864\n",
      "Epoch 3860 :\n",
      " Train - rmse: 1.7893997281893534\n",
      "Epoch 3870 :\n",
      " Train - rmse: 1.7890114352340671\n",
      "Epoch 3880 :\n",
      " Train - rmse: 1.788624696020328\n",
      "Epoch 3890 :\n",
      " Train - rmse: 1.7882395014699974\n",
      "Epoch 3900 :\n",
      " Train - rmse: 1.7878558425795958\n",
      "Epoch 3910 :\n",
      " Train - rmse: 1.7874737104195086\n",
      "Epoch 3920 :\n",
      " Train - rmse: 1.7870930961332063\n",
      "Epoch 3930 :\n",
      " Train - rmse: 1.7867139909364718\n",
      "Epoch 3940 :\n",
      " Train - rmse: 1.7863363861166375\n",
      "Epoch 3950 :\n",
      " Train - rmse: 1.7859602730318351\n",
      "Epoch 3960 :\n",
      " Train - rmse: 1.7855856431102515\n",
      "Epoch 3970 :\n",
      " Train - rmse: 1.7852124878493965\n",
      "Epoch 3980 :\n",
      " Train - rmse: 1.784840798815379\n",
      "Epoch 3990 :\n",
      " Train - rmse: 1.7844705676421941\n",
      "Epoch 4000 :\n",
      " Train - rmse: 1.784101786031016\n"
     ]
    }
   ],
   "source": [
    "lmbda = 0.00001\n",
    "#create factor/embedding vector to users\n",
    "P = create_vector(n_users, n_factors=6)\n",
    "Q = create_vector(n_items, n_factors=6)\n",
    "\n",
    "P, Q = GD(dataset, P, Q, epochs=4000, learning_rate=0.8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "92860f9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:56:20.202642Z",
     "iopub.status.busy": "2024-09-13T20:56:20.202192Z",
     "iopub.status.idle": "2024-09-13T20:56:20.210053Z",
     "shell.execute_reply": "2024-09-13T20:56:20.208917Z"
    },
    "papermill": {
     "duration": 0.095779,
     "end_time": "2024-09-13T20:56:20.212639",
     "exception": false,
     "start_time": "2024-09-13T20:56:20.116860",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#explotar un nuevo conjunto de datos verificando\n",
    "#que sea valida, es decir, en base al conjunto de\n",
    "#usuarios e items(films) entrenados\n",
    "def process_new_data(dataset, user_ids, items_ids):\n",
    "    select_data = dataset['userid'].isin(user_ids.keys()) & dataset['itemid'].isin(items_ids.keys())\n",
    "    dataset = dataset[select_data]\n",
    "    dataset['userid'] = np.array([user_ids[userid] for userid in dataset['userid']])\n",
    "    dataset['itemid'] = np.array([items_ids[itemid] for itemid in dataset['itemid']])\n",
    "    return dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "37eecc45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:56:20.382504Z",
     "iopub.status.busy": "2024-09-13T20:56:20.382071Z",
     "iopub.status.idle": "2024-09-13T20:56:20.658969Z",
     "shell.execute_reply": "2024-09-13T20:56:20.657626Z"
    },
    "papermill": {
     "duration": 0.366157,
     "end_time": "2024-09-13T20:56:20.662114",
     "exception": false,
     "start_time": "2024-09-13T20:56:20.295957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.784101786031016\n"
     ]
    }
   ],
   "source": [
    "train_rmse = rmse(train, P, Q)\n",
    "#val_rmse = rmse(valid, P, Q)\n",
    "print(train_rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "aaa94869",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:56:20.830136Z",
     "iopub.status.busy": "2024-09-13T20:56:20.829706Z",
     "iopub.status.idle": "2024-09-13T20:56:20.848638Z",
     "shell.execute_reply": "2024-09-13T20:56:20.847445Z"
    },
    "papermill": {
     "duration": 0.107008,
     "end_time": "2024-09-13T20:56:20.851765",
     "exception": false,
     "start_time": "2024-09-13T20:56:20.744757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userid</th>\n",
       "      <th>itemid</th>\n",
       "      <th>rating</th>\n",
       "      <th>estimation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>7.710219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.355689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8.268635</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.015429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3.867750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.284023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.793728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.250485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.025549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.322472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.882415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.259131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>9.0</td>\n",
       "      <td>7.734358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7.041886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7.152362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>6.0</td>\n",
       "      <td>7.773780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>7.0</td>\n",
       "      <td>5.007563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.796458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.520301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>9.0</td>\n",
       "      <td>7.669782</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    userid  itemid  rating  estimation\n",
       "0        0       0     9.0    7.710219\n",
       "1        1       1     8.0    8.355689\n",
       "2        2       2     7.0    8.268635\n",
       "3        3       3     7.0    7.015429\n",
       "4        4       4     9.0    3.867750\n",
       "5        5       5     7.0    7.284023\n",
       "6        6       6     6.0    6.793728\n",
       "7        7       7     5.0    6.250485\n",
       "8        8       8    10.0    8.025549\n",
       "9        9       9     6.0    6.322472\n",
       "10      10      10     6.0    5.882415\n",
       "11      11      11     3.0    5.259131\n",
       "12      12      12     9.0    7.734358\n",
       "13      13      13     8.0    7.041886\n",
       "14      14      14     8.0    7.152362\n",
       "15      15      15     6.0    7.773780\n",
       "16      16      16     7.0    5.007563\n",
       "17      17      17    10.0   10.796458\n",
       "18      18      18     6.0    4.520301\n",
       "19      19      19     9.0    7.669782"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9c8a7f8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:56:21.023226Z",
     "iopub.status.busy": "2024-09-13T20:56:21.022768Z",
     "iopub.status.idle": "2024-09-13T20:56:21.039085Z",
     "shell.execute_reply": "2024-09-13T20:56:21.037781Z"
    },
    "papermill": {
     "duration": 0.10443,
     "end_time": "2024-09-13T20:56:21.042102",
     "exception": false,
     "start_time": "2024-09-13T20:56:20.937672",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userid</th>\n",
       "      <th>itemid</th>\n",
       "      <th>rating</th>\n",
       "      <th>estimation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11335</td>\n",
       "      <td>1210</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8.100387</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   userid  itemid  rating  estimation\n",
       "1   11335    1210     5.0    8.100387"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#27609 361748\n",
    "train.loc[(train['userid']==user_ids.get(8660)) & (train['itemid']==item_ids.get(2543472))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "09ad8793",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:56:21.212879Z",
     "iopub.status.busy": "2024-09-13T20:56:21.212431Z",
     "iopub.status.idle": "2024-09-13T20:56:21.218217Z",
     "shell.execute_reply": "2024-09-13T20:56:21.217043Z"
    },
    "papermill": {
     "duration": 0.093306,
     "end_time": "2024-09-13T20:56:21.220758",
     "exception": false,
     "start_time": "2024-09-13T20:56:21.127452",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def estimate_single(user, movie, P, Q):\n",
    "    # Estimate the rating for a single user and movie\n",
    "    return np.dot(Q[movie], P[user])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7e5d3ec0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-13T20:56:21.389675Z",
     "iopub.status.busy": "2024-09-13T20:56:21.389271Z",
     "iopub.status.idle": "2024-09-13T20:56:34.879547Z",
     "shell.execute_reply": "2024-09-13T20:56:34.878177Z"
    },
    "papermill": {
     "duration": 13.579528,
     "end_time": "2024-09-13T20:56:34.882727",
     "exception": false,
     "start_time": "2024-09-13T20:56:21.303199",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tests = pd.read_csv('/kaggle/input/movie-recommender-dataset/test.csv',sep='-')\n",
    "tests['Expected'] = 0.0\n",
    "\n",
    "tests['Id'] = tests['userid'].astype(str) + '-' + tests['itemid'].astype(str)\n",
    "for index, row in tests.iterrows():\n",
    "    user_id = int(row['userid'])\n",
    "    movie_id = int(row['itemid'])\n",
    "    tests.at[index, 'Expected'] = round(estimate_single(user_ids.get(user_id), item_ids.get(movie_id), P, Q), 4)\n",
    "\n",
    "tests[['Id', 'Expected']].to_csv('resultados_estimados.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4268467,
     "sourceId": 7350299,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30626,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1283.357336,
   "end_time": "2024-09-13T20:56:35.797597",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-13T20:35:12.440261",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
